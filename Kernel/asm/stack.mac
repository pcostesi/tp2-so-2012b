; Stack handling macros. Things like stackframes
; and stack init.

; see https://msdn.microsoft.com/en-us/library/6t169e9c.aspx
%macro PUSHCALL 0
    push    RBX
    push    RDI
    push    RSI
    push    RSP
    push    R12
    push    R13
    push    R14
    push    R15
%endmacro

%macro POPCALL 0
    pop     R15
    pop     R14
    pop     R13
    pop     R12
    pop     RSP
    pop     RSI
    pop     RDI
    pop     RBX
%endmacro


; This macro will set a pristine process stack
; with 
%macro INITPROC 3
    push    0        ;save current rax
    push    0        ;save current rbx
    push    0        ;save current rcx
    push    0        ;save current rdx
    push    %1       ;save current rbp
    push    %2       ;save current rdi
    push    %3       ;save current rsi
    push    0        ;save current r8
    push    0        ;save current r9
    push    0        ;save current r10
    push    0      ;save current r11
    push    0      ;save current r12
    push    0      ;save current r13
    push    0      ;save current r14
    push    0      ;save current r15
    push    0      ;save fs
    push    0      ;save gs
%endmacro

%macro LOADPROC 0
    mov     gs,     [rsp + 8 *  0]
    mov     fs,     [rsp + 8 *  1]
    mov     r15,    [rsp + 8 *  2]
    mov     r14,    [rsp + 8 *  3]
    mov     r13,    [rsp + 8 *  4]
    mov     r12,    [rsp + 8 *  5]
    mov     r11,    [rsp + 8 *  6]
    mov     r10,    [rsp + 8 *  7]
    mov     r9,     [rsp + 8 *  8]
    mov     r8,     [rsp + 8 *  9]
    mov     rsi,    [rsp + 8 * 10]
    mov     rdi,    [rsp + 8 * 11]
    mov     rbp,    [rsp + 8 * 12]
    mov     rdx,    [rsp + 8 * 13]
    mov     rcx,    [rsp + 8 * 14]
    mov     rbx,    [rsp + 8 * 15]
    mov     rax,    [rsp + 8 * 16]
%endmacro

; First param must point to gs @ PUSHA / INITPROC
%macro SET_SYSCALL_RET 2
    mov     [%1 + (8 * 16)], %2
%endmacro


%macro PUSH_PARAMS 0
    push    rdi
    push    rsi
    push    rdx
    push    rcx
    push    r8
    push    r9
%endmacro

%macro POP_PARAMS 0
    pop     r9
    pop     r8
    pop     rcx
    pop     rdx
    pop     rsi
    pop     rdi
%endmacro


; This macro will save the current process state into
; the stack. It does not, however, set the trap frame.
; See _sched_init_stack for that
%macro PUSHA 0
    push    QWORD rax      ;save current rax
    push    QWORD rbx      ;save current rbx
    push    QWORD rcx      ;save current rcx
    push    QWORD rdx      ;save current rdx
    push    QWORD rbp      ;save current rbp
    push    QWORD rdi      ;save current rdi
    push    QWORD rsi      ;save current rsi
    push    QWORD r8       ;save current r8
    push    QWORD r9       ;save current r9
    push    QWORD r10      ;save current r10
    push    QWORD r11      ;save current r11
    push    QWORD r12      ;save current r12
    push    QWORD r13      ;save current r13
    push    QWORD r14      ;save current r14
    push    QWORD r15      ;save current r15
    push    QWORD fs       ;save fs
    push    QWORD gs       ;save gs
%endmacro

%macro POPA 0
    pop     QWORD gs
    pop     QWORD fs
    pop     QWORD r15      ;set r15
    pop     QWORD r14      ;set r14
    pop     QWORD r13      ;set r13
    pop     QWORD r12      ;set r12
    pop     QWORD r11      ;set r11
    pop     QWORD r10      ;set r10
    pop     QWORD r9       ;set r9
    pop     QWORD r8       ;set r8
    pop     QWORD rsi      ;set rsi
    pop     QWORD rdi      ;set rdi
    pop     QWORD rbp      ;set rbp
    pop     QWORD rdx      ;set rdx
    pop     QWORD rcx      ;set rcx
    pop     QWORD rbx      ;set rbx
    pop     QWORD rax      ;set rax
%endmacro

%macro ENTER 0
    push    rbp
    mov     rbp,    rsp
    PUSHCALL
%endmacro

%macro LEAVE 0
    POPCALL
    mov     rsp,    rbp
    pop     rbp
    ret
%endmacro
